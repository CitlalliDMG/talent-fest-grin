{"version":3,"sources":["serviceWorker.js","Session/AuthUserContext.js","constants/routes.js","firebase/firebase.js","firebase/auth.js","components/SignOut/SignOut.js","components/Navigation/Navigation.js","components/SignIn/SignIn.js","Session/withAuthorization.js","lib/api.js","components/SearchField/SearchField.js","components/DisplayCards/DisplayCards.js","components/Home/Home.js","components/Account/Account.js","components/Admin/Admin.js","components/Page404/Page404.js","components/App/App.js","Session/withAuthentication.js","index.js","assets/google-logo-icon-PNG-Transparent-Background.png"],"names":["Boolean","window","location","hostname","match","AuthUserContext","createContext","HOME","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GoogleAuthProvider","db","database","doSignOut","signOut","doSignInWithGoogle","signInWithRedirect","SignOutButton","react_default","a","createElement","className","type","onClick","NavigationAuth","Link","to","ROUTES","SignOut","NavigationNonAuth","Navigation","Session_AuthUserContext","Consumer","authUser","Navigation_NavigationAuth","Navigation_NavigationNonAuth","SignInButton","signInWithGoogle","history","_this","props","push","_this2","this","id","src","iconGoogle","alt","Component","withRouter","_ref","SignIn_SignInButton","withAuthorization","authCondition","ComponentToRender","WithAuthorization","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","onAuthStateChanged","lib_api","pokemonName","fetch","concat","response","json","data","SearchField","event","getCard","target","preventDefault","doFetch","onSubmit","fetchSearch","bind","initialName","onChange","inputSearch","placeholder","DisplayCards","console","log","map","pokemonData","index","lib","header","reveal","image","imageUrl","waves","title","name","HomePage","call","state","searchString","searchResultList","setState","api","cardsObject","cards","components_SearchField_SearchField","fromSearchField","fromSearchByName","components_DisplayCards_DisplayCards","AccountPage","AdminPage","Page404Page","withAuthentication","WithAuthentication","Provider","BrowserRouter","basename","process","react","components_Navigation_Navigation","Switch","Route","exact","path","component","SignInPage","Page404","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4d61bb2d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createContext } from 'react';\n\nconst AuthUserContext = createContext(null);\n\nexport default AuthUserContext;\n","export const SIGN_IN = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';","// Initialize Firebase\nimport firebase from \"firebase\";\nimport 'firebase/auth';\n\nvar config = {\n    apiKey: \"AIzaSyBYiCtUEOtet1va7u-LZ4mnt4pXKKpzQLY\",\n    authDomain: \"pockedecktcg.firebaseapp.com\",\n    databaseURL: \"https://pockedecktcg.firebaseio.com\",\n    projectId: \"pockedecktcg\",\n    storageBucket: \"pockedecktcg.appspot.com\",\n    messagingSenderId: \"80073856143\"\n};\n\nif(!firebase.apps.length) {\n    firebase.initializeApp(config);\n}\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst auth = firebase.auth();\nconst db = firebase.database();\n\nexport {\n    provider,\n    auth,\n    db\n};\n","import { auth, provider } from './firebase';\n\n// Sign Out function\nexport const doSignOut = () => auth.signOut();\n\n\n// Sign in Google\nexport const doSignInWithGoogle = () => {\n    auth.signInWithRedirect(provider)\n};","import React from 'react';\n\nimport { auth } from '../../firebase';\n\nconst SignOutButton = () =>\n  <button\n    className=\"button\"\n    type=\"button\"\n    onClick={auth.doSignOut}\n  >\n    Cerrar sesión\n  </button>\n\nexport default SignOutButton;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AuthUserContext from '../../Session/AuthUserContext';\nimport * as ROUTES from '../../constants/routes';\nimport SignOutButton from '../SignOut/SignOut';\n\nconst Navigation = () => \n  <AuthUserContext.Consumer>\n    { authUser => authUser\n      ? <NavigationAuth />\n      : <NavigationNonAuth />\n    }\n  </AuthUserContext.Consumer>\n\nconst NavigationAuth = () => (\n    <div>\n        <ul>\n            <li>\n                <Link to= {ROUTES.HOME}>Home</Link>\n            </li>\n            <li>\n                <Link to= {ROUTES.ACCOUNT}>Tu cuenta</Link>\n            </li>\n            <li>\n                <SignOutButton/>\n            </li>\n        </ul>\n    </div>\n);\n\nconst NavigationNonAuth = () => (\n        <div>\n            <ul>\n                <li>\n                    <Link to= {ROUTES.SIGN_IN}>Entrar</Link>\n                </li>\n            </ul>\n        </div> \n);\n\nexport default Navigation;","import React, { Component } from \"react\";\nimport { withRouter } from 'react-router-dom';\n\n// import logo from \".../../assets/logotipo-pokedeck-login.png\";\nimport iconGoogle from \"../../assets/google-logo-icon-PNG-Transparent-Background.png\";\nimport { auth } from '../../firebase';\nimport * as ROUTES from '../../constants/routes';\nimport './SignIn.css';\n\nconst SignInPage = ({ history }) =>\n  <main>\n  {/* <img src={logo} alt=\"logo-pokedeck\" id=\"logo-index\" /> */}\n  <img alt=\"logo-pokedeck\" id=\"logo-index\" />\n  <h1>my.pokedeck</h1>\n  <p>\n    Texto de introducción\n  </p>\n  <SignInButton history={history} />\n  </main>\n\nclass SignInButton extends Component {\n  signInWithGoogle = () => {\n    // console.log('holi');\n    const {\n      history,\n    } = this.props;\n\n    auth.doSignInWithGoogle()\n    history.push(ROUTES.HOME);\n  }\n\n  render() {\n    return (\n        <button type=\"button\" id=\"btn-google\" onClick={()=>this.signInWithGoogle()}>\n          <img src={iconGoogle} alt=\"icon-google\" />\n          Google\n        </button>\n    );\n  }\n}\n\nexport default withRouter(SignInPage);\n\nexport {\n  SignInButton,\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport AuthUserContext from './AuthUserContext';\nimport { firebase } from '../firebase';\nimport * as routes from '../constants/routes';\n\nconst withAuthorization = (authCondition) => (ComponentToRender) => {\n  class WithAuthorization extends Component {\n    componentDidMount() {\n      firebase.auth.onAuthStateChanged(authUser => {\n        if (!authCondition(authUser)) {\n          this.props.history.push(routes.SIGN_IN);\n        }\n      });\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser => authUser\n            ? <ComponentToRender {...this.props}/>\n            : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return withRouter(WithAuthorization);\n}\n\nexport default withAuthorization;\n","const BASE_URL = 'https://api.pokemontcg.io/v1/';\n\nclass api {\nasync getCard(pokemonName) {\n        const response = await fetch(`${BASE_URL}cards?name=${pokemonName}`);\n        const data = await response.json();\n        return data;\n    }\n}\n\nexport default new api();","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nclass SearchField extends Component {\n\n  inputSearch(event){\n    this.props.getCard(event.target.value);\n  }\n\n  fetchSearch(event){\n      event.preventDefault();\n      this.props.doFetch();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.fetchSearch.bind(this)}>\n        <input\n          value={this.props.initialName}\n          onChange={this.inputSearch.bind(this)}\n          type=\"text\"\n          placeholder=\"Ingresa que carta buscas\"\n        />\n        <button type=\"submit\">Buscar</button>\n      </form>\n    );\n  }\n}\n\nSearchField.propTypes = {\n  inputSearch: propTypes.func,\n}\n\nexport default SearchField;\n","import React, { Component } from 'react';\nimport {Card, CardTitle} from 'react-materialize';\nimport './DisplayCards.css';\n\nclass DisplayCards extends Component {\n    render () {\n        console.log(this.props.data)\n        return (\n                <div className=\"cardsContainer\">\n                    {this.props.data.map((pokemonData, index) => (\n                        <Card \n                            className=\"pokemonCard\"\n                            header={<CardTitle reveal image={pokemonData.imageUrl} waves='light'/>}\n                            title={pokemonData.name}\n                            reveal={<p>Here is some more information about this product that is only revealed once clicked on.</p>}\n                            key={index}\n                        >\n                        </Card>\n                    ))}\n                </div>\n    )}\n}\n \nexport default DisplayCards;","import React, { Component } from 'react';\n\nimport withAuthorization from \"../../Session/withAuthorization\";\nimport api from \"../../lib/api\";\nimport SearchField from \"../SearchField/SearchField\";\nimport DisplayCards from \"../DisplayCards/DisplayCards\";\nimport './Home.css';\n\nclass HomePage extends Component {\n    constructor(){\n        super();\n        this.state = {\n            searchString : '',\n            searchResultList: []\n        }\n    }\n    //Get card searched\n    fromSearchField(inputSearch) {\n        this.setState({\n            searchString: inputSearch\n        })\n    }\n\n    //Search by Name\n    async fromSearchByName() {\n        const cardsObject = await api.getCard(this.state.searchString);\n        this.setState({searchResultList: cardsObject.cards});\n    }\n\n    render(){\n        return ( \n                <div>\n                    <h1>Home Page</h1>\n                    <SearchField getCard={this.fromSearchField.bind(this)} doFetch={this.fromSearchByName.bind(this)}/>\n                    <DisplayCards data={this.state.searchResultList}/>\n                </div>\n        );\n    }\n}\n \nconst authCondition = authUser => !!authUser;\n\nexport default withAuthorization(authCondition)(HomePage);","import React from 'react';\n\nconst AccountPage = () => {\n    return ( \n        <div>\n            <h1>Account Page</h1>\n        </div>\n    );\n}\n \nexport default AccountPage;","import React from 'react';\n\nconst AdminPage = () => {\n    return ( \n        <div>\n            <h1>Admin Page</h1>\n        </div>\n    );\n}\n \nexport default AdminPage;","import React from 'react';\n\nconst Page404Page = () => {\n    return ( \n        <div>\n            <h1>Page404</h1>\n        </div>\n    );\n}\n \nexport default Page404Page;","import React, { Fragment } from 'react';\nimport { \n    BrowserRouter as Router,\n    Route,\n    Switch\n} from 'react-router-dom';\n\nimport Navigation from '../Navigation/Navigation';\nimport SignInPage from '../SignIn/SignIn';\nimport HomePage from '../Home/Home';\nimport AccountPage from '../Account/Account';\nimport AdminPage from '../Admin/Admin';\nimport Page404 from '../Page404/Page404';\n\nimport * as ROUTES from '../../constants/routes';\nimport withAuthentication from '../../Session/withAuthentication';\n\nconst App = () => (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Fragment>\n        <Navigation />\n        <Switch>\n          <Route exact path={ROUTES.SIGN_IN} component={SignInPage} />\n          <Route exact path={ROUTES.HOME} component={HomePage} />\n          <Route exact path={ROUTES.ACCOUNT} component={AccountPage} />\n          <Route exact path={ROUTES.ADMIN} component={AdminPage} />\n          <Route component={Page404} />\n        </Switch>\n      </Fragment>\n    </Router>\n);\n\nexport default withAuthentication(App);\n","import React, { Component } from 'react';\n\nimport AuthUserContext from './AuthUserContext';\nimport { firebase } from '../firebase';\n\nconst withAuthentication = (ComponentToRender) => {\n  class WithAuthentication extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        authUser: null,\n      };\n    }\n\n    componentDidMount() {\n      firebase.auth.onAuthStateChanged(authUser => {\n        authUser\n          ? this.setState({ authUser })\n          : this.setState({ authUser: null });\n      });\n    }\n\n    render() {\n      const { authUser } = this.state;\n      return (\n        <AuthUserContext.Provider value={authUser}>\n          <ComponentToRender {...this.props}/>\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n  return WithAuthentication;\n}\n\nexport default withAuthentication;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App/App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/google-logo-icon-PNG-Transparent-Background.0dd54f85.png\";"],"sourceRoot":""}